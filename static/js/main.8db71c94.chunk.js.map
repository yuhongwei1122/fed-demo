{"version":3,"sources":["loading.js","serviceWorker.js","index.js","images/pic-empty-networkfault.png"],"names":["refresh","request","XMLHttpRequest","open","window","location","href","setRequestHeader","responseType","send","onload","reload","MyLoadingComponent","isLoading","error","className","style","marginTop","textAlign","height","src","Empty","alt","marginBottom","onClick","type","Boolean","hostname","match","moment","locale","ReactDOM","render","zhCN","path","component","Loadable","loader","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"wlBAGA,SAASA,IAEL,IAAIC,EAAU,IAAIC,eAElBD,EAAQE,KAAK,MAAOC,OAAOC,SAASC,MAIpCL,EAAQM,iBAAiB,SAAS,YAClCN,EAAQM,iBAAiB,WAAW,GACpCN,EAAQM,iBAAiB,gBAAgB,YACzCN,EAAQO,aAAe,OACvBP,EAAQQ,OAGRR,EAAQS,OAAS,WACbN,OAAOC,SAASM,QAAO,IAG/B,IAgCeC,EAhCY,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,UAAWC,EAAY,EAAZA,MAErC,OAAID,EAEI,yBAAKE,UAAU,WACX,yBAAKA,UAAU,YAMlBD,EACE,yBAAKE,MAAO,CAACC,UAAU,GAAGC,UAAU,WACvC,6BACI,yBAAKH,UAAU,cACX,yBAAKC,MAAO,CAACE,UAAU,SAASC,OAAO,QACnC,yBAAKC,IAAKC,IAAOC,IAAI,QAAQN,MAAO,CAACG,OAAO,WAEhD,yBAAKJ,UAAU,aAAaC,MAAO,CAACO,aAAa,KAAjD,sHAGA,0BAAMR,UAAU,SAASS,QAAS,kBAAIxB,GAASyB,KAAK,WAApD,+BAQL,MCvCKC,QACW,cAA7BtB,OAAOC,SAASsB,UAEe,UAA7BvB,OAAOC,SAASsB,UAEhBvB,OAAOC,SAASsB,SAASC,MACvB,2D,oCCENC,IAAOC,OAAO,SAEdC,IAASC,OAAO,uBAAgBF,OAAQG,KACpC,kBAAC,IAAD,KACE,kBAAC,IAAD,KAKE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWC,IAAS,CACtCC,OAAQ,kBAAM,qDACdC,QAAS1B,MAEX,kBAAC,IAAD,CAAOsB,KAAK,IAAIC,UAAWC,IAAS,CAClCC,OAAQ,kBAAM,qDACdC,QAAS1B,SAMf2B,SAASC,eAAe,SDwFtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBEnInBC,EAAOC,QAAU,IAA0B,qD","file":"static/js/main.8db71c94.chunk.js","sourcesContent":["import React from 'react';\nimport './loading.scss';\nimport Empty from './images/pic-empty-networkfault.png';\nfunction refresh(){\n    //创建一个HTTP请求对象\n    let request = new XMLHttpRequest();\n    //使用open（）打开一个新请求\n    request.open('GET', window.location.href);\n    //设置XHR访问JSON格式数据，然后发送请求\n    // request.responseType = 'json';\n    //设置XHR访问text格式数据\n    request.setRequestHeader(\"Pragma\",\"no-cache\"); // 可以定义请求头带给后端\n    request.setRequestHeader(\"Expires\",-1);\n    request.setRequestHeader(\"Cache-Control\",\"no-cache\");\n    request.responseType = 'text';\n    request.send();\n \n    //处理来自服务器的数据\n    request.onload = function() {\n        window.location.reload(true);\n    };\n};\nconst MyLoadingComponent = ({ isLoading, error }) => {\n    // Handle the loading state\n    if (isLoading) {\n        return (\n            <div className='loading'>\n                <div className='loader'>\n                </div>\n            </div>\n        );\n    }\n    // Handle the error state\n    else if (error) {\n        return <div style={{marginTop:40,textAlign:'center'}}>\n            <div>\n                <div className='error-wrap'>\n                    <div style={{textAlign:'center',height:'70%'}}>\n                        <img src={Empty} alt='error' style={{height:'100%'}}/>\n                    </div>\n                    <div className='desc-lable' style={{marginBottom:20}}>\n                       页面有新发布版本，请Ctrl+R刷新页面清除缓存\n                    </div>\n                    <span className='link-a' onClick={()=>refresh} type=\"primary\">\n                        重新加载\n                    </span>\n                </div>\n            </div>\n        </div>\n    }\n    else {\n        return null;\n    }\n};\nexport default MyLoadingComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/es/map';\nimport 'core-js/es/set';\n\nimport 'raf/polyfill';\nimport 'core-js/es/string';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n  HashRouter as Router,\n  Route,\n  Switch\n} from \"react-router-dom\";\nimport Loadable from 'react-loadable';\nimport MyLoadingComponent from './loading';\nimport { ConfigProvider } from 'antd';\nimport * as serviceWorker from './serviceWorker';\nimport zhCN from 'antd/es/locale/zh_CN';\nimport moment from 'moment';\nimport 'moment/locale/zh-cn';\nmoment.locale('zh-cn');\n\nReactDOM.render(<ConfigProvider locale={zhCN}>\n    <Router>\n      <Switch>\n        {/* <Route path=\"/404\" component={Loadable({\n          loader: () => import('./pages/404'),\n          loading: MyLoadingComponent\n        })} /> */}\n        <Route path=\"/demo\" component={Loadable({\n          loader: () => import('./pages/newdemo'),\n          loading: MyLoadingComponent\n        })} />\n        <Route path=\"/\" component={Loadable({\n          loader: () => import('./pages/readcsv'),\n          loading: MyLoadingComponent\n        })} />\n        \n      </Switch>\n    </Router>\n  </ConfigProvider>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/pic-empty-networkfault.0e6cfdfd.png\";"],"sourceRoot":""}